/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package net.cumps.eloadgui;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.StringTokenizer;
import java.util.logging.Logger;
import javax.swing.Timer;

/**
 *
 * @author jancu
 */
public class MainFrame extends javax.swing.JFrame implements ActionListener {

    private static final Logger log = Logger.getLogger(MainFrame.class.getName());
    private static final Instrument instrument = new Instrument();
    private static final RefreshData refreshData = new RefreshData();
    private static Timer timer = null;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        initTimer();
    }

    private void initTimer() {
        timer = new Timer(100, this);
        timer.setInitialDelay(900);
        timer.start();
    }

    //Handle timer event.
    @Override
    public void actionPerformed(ActionEvent e) {

        // get info - as much as we can together
        String s;
        s = ("INP?;FUNC?;CURR?;:MEAS:CURR:DC?;:MEAS:VOLT:DC?;:SYST:ERR:COUNT?\n");
        synchronized (instrument) {
            instrument.write(s);
            s = instrument.read();
        }

        // parse
        StringTokenizer tokenizer = new StringTokenizer(s, ";");

        // input
        if (tokenizer.hasMoreTokens()) {
            refreshData.bActive = tokenizer.nextToken().startsWith("1");
        }
        // mode
        if (tokenizer.hasMoreTokens()) {
            refreshData.sMode = tokenizer.nextToken().replace("\"", "");
        }
        // set value
        if (tokenizer.hasMoreTokens()) {
            refreshData.sSetValue = tokenizer.nextToken().replace("\n", "");
        }
        // measured current
        if (tokenizer.hasMoreTokens()) {
            refreshData.sI = tokenizer.nextToken().replace("\n", "");
        }
        // measured voltage
        if (tokenizer.hasMoreTokens()) {
            refreshData.sV = tokenizer.nextToken().replace("\n", "");
        }
        // set error count
        if (tokenizer.hasMoreTokens()) {
            refreshData.sErrCount = tokenizer.nextToken().replace("\n", "");
        }
        // update LCD display
        jTextAreaLCD.setText("mode: "
                + (String) (refreshData.sMode.startsWith("CURRent") ? "I" : "*ERROR*")
                + " "
                + refreshData.sSetValue
                + "\nI: " + refreshData.sI + "\nV: " + refreshData.sV
                + "\nInput: O"
                + (String) (refreshData.bActive ? "n " : "ff"));

        // update Input Active control
        jCheckBoxInputActive.setSelected(refreshData.bActive);

        // update error count
        jButtonSCPIErrorClear.setText("Errors: " + refreshData.sErrCount);
        if (refreshData.sErrCount.startsWith("0")) {
            jButtonSCPIErrorClear.setBackground(Color.green);
        } else {
            jButtonSCPIErrorClear.setBackground(Color.red);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPaneLCD = new javax.swing.JScrollPane();
        jTextAreaLCD = new javax.swing.JTextArea();
        jCheckBoxInputActive = new javax.swing.JCheckBox();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanelConstantCurrent = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldConstantCurrent = new javax.swing.JTextField();
        jButtonConstantCurrent = new javax.swing.JButton();
        jPanelSCPI = new javax.swing.JPanel();
        jTextFieldSCPICmd = new javax.swing.JTextField();
        jButtonSCPISend = new javax.swing.JButton();
        jTextFieldSCPIReply = new javax.swing.JTextField();
        jButtonSCPIResultClear = new javax.swing.JButton();
        jScrollPaneError = new javax.swing.JScrollPane();
        jTextAreaSCPIError = new javax.swing.JTextArea();
        jButtonSCPIErrorClear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("eLoad");
        setName("mainFrame"); // NOI18N

        jTextAreaLCD.setEditable(false);
        jTextAreaLCD.setColumns(20);
        jTextAreaLCD.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jTextAreaLCD.setRows(5);
        jTextAreaLCD.setText("The Breadboard\nElectronic Load\nCopyright Free\nVersion 0\n");
        jTextAreaLCD.setAutoscrolls(false);
        jTextAreaLCD.setFocusable(false);
        jTextAreaLCD.setRequestFocusEnabled(false);
        jTextAreaLCD.setVerifyInputWhenFocusTarget(false);
        jScrollPaneLCD.setViewportView(jTextAreaLCD);

        jCheckBoxInputActive.setText("Load Active");
        jCheckBoxInputActive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxInputActiveActionPerformed(evt);
            }
        });

        jLabel1.setText("Current (A):");

        jTextFieldConstantCurrent.setText("0.0");

        jButtonConstantCurrent.setText("Set");
        jButtonConstantCurrent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConstantCurrentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelConstantCurrentLayout = new javax.swing.GroupLayout(jPanelConstantCurrent);
        jPanelConstantCurrent.setLayout(jPanelConstantCurrentLayout);
        jPanelConstantCurrentLayout.setHorizontalGroup(
            jPanelConstantCurrentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConstantCurrentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldConstantCurrent, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonConstantCurrent)
                .addContainerGap(221, Short.MAX_VALUE))
        );
        jPanelConstantCurrentLayout.setVerticalGroup(
            jPanelConstantCurrentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConstantCurrentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelConstantCurrentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldConstantCurrent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonConstantCurrent))
                .addContainerGap(82, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Constant Current", jPanelConstantCurrent);

        jTextFieldSCPICmd.setText("*IDN?");

        jButtonSCPISend.setText("Send");
        jButtonSCPISend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSCPISendActionPerformed(evt);
            }
        });

        jTextFieldSCPIReply.setEditable(false);
        jTextFieldSCPIReply.setDisabledTextColor(new java.awt.Color(0, 0, 0));

        jButtonSCPIResultClear.setText("Clear");
        jButtonSCPIResultClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSCPIResultClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelSCPILayout = new javax.swing.GroupLayout(jPanelSCPI);
        jPanelSCPI.setLayout(jPanelSCPILayout);
        jPanelSCPILayout.setHorizontalGroup(
            jPanelSCPILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSCPILayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelSCPILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldSCPICmd, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
                    .addComponent(jTextFieldSCPIReply))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelSCPILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonSCPISend)
                    .addComponent(jButtonSCPIResultClear))
                .addContainerGap())
        );
        jPanelSCPILayout.setVerticalGroup(
            jPanelSCPILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSCPILayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelSCPILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSCPISend)
                    .addComponent(jTextFieldSCPICmd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelSCPILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSCPIResultClear)
                    .addComponent(jTextFieldSCPIReply, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(53, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("SCPI", jPanelSCPI);

        jTextAreaSCPIError.setEditable(false);
        jTextAreaSCPIError.setBackground(new java.awt.Color(239, 239, 239));
        jTextAreaSCPIError.setColumns(20);
        jTextAreaSCPIError.setRows(5);
        jTextAreaSCPIError.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jScrollPaneError.setViewportView(jTextAreaSCPIError);

        jButtonSCPIErrorClear.setText("Errors: 0");
        jButtonSCPIErrorClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSCPIErrorClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneError, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTabbedPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPaneLCD)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxInputActive))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonSCPIErrorClear)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxInputActive)
                    .addComponent(jScrollPaneLCD, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonSCPIErrorClear)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPaneError)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSCPISendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSCPISendActionPerformed
        String s;
        synchronized (instrument) {
            instrument.write(jTextFieldSCPICmd.getText() + '\n');
            s = instrument.read();
        }
        jTextFieldSCPIReply.setText(s);
    }//GEN-LAST:event_jButtonSCPISendActionPerformed

    private void jButtonSCPIResultClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSCPIResultClearActionPerformed
        jTextFieldSCPIReply.setText("");
    }//GEN-LAST:event_jButtonSCPIResultClearActionPerformed

    private void jCheckBoxInputActiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxInputActiveActionPerformed
        String s;
        s = "INP " + (jCheckBoxInputActive.isSelected() ? "ON\n" : "OFF\n");
        synchronized (instrument) {
            instrument.write(s);
        }
    }//GEN-LAST:event_jCheckBoxInputActiveActionPerformed

    private void jButtonConstantCurrentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConstantCurrentActionPerformed
        String s;
        s = "CURR " + jTextFieldConstantCurrent.getText() + "\n";
        synchronized (instrument) {
            instrument.write(s);
        }
    }//GEN-LAST:event_jButtonConstantCurrentActionPerformed

    private void jButtonSCPIErrorClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSCPIErrorClearActionPerformed
        String s = jButtonSCPIErrorClear.getText();
        String sLog = new String("");
        if (s.startsWith("Errors: 0")) {
            jTextAreaSCPIError.setText("");
        } else {
            StringTokenizer tokenizer = new StringTokenizer(s, ":");
            tokenizer.nextToken();
            int iCount = Integer.parseInt(tokenizer.nextToken().trim());
            synchronized (instrument) {
                for (int i = 0; i < iCount; i++) {
                    instrument.write("SYST:ERR?\n");
                    sLog = sLog + (instrument.read());
                }
            }
            jTextAreaSCPIError.setText(sLog);
        }
    }//GEN-LAST:event_jButtonSCPIErrorClearActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        USBParams usbParams = new USBParams();
        new Cli(args).parse(usbParams);

        if (instrument.connect(usbParams)) {
            instrument.init();
        }

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonConstantCurrent;
    private javax.swing.JButton jButtonSCPIErrorClear;
    private javax.swing.JButton jButtonSCPIResultClear;
    private javax.swing.JButton jButtonSCPISend;
    private javax.swing.JCheckBox jCheckBoxInputActive;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanelConstantCurrent;
    private javax.swing.JPanel jPanelSCPI;
    private javax.swing.JScrollPane jScrollPaneError;
    private javax.swing.JScrollPane jScrollPaneLCD;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextAreaLCD;
    private javax.swing.JTextArea jTextAreaSCPIError;
    private javax.swing.JTextField jTextFieldConstantCurrent;
    private javax.swing.JTextField jTextFieldSCPICmd;
    private javax.swing.JTextField jTextFieldSCPIReply;
    // End of variables declaration//GEN-END:variables
}
